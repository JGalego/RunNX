name: Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Detailed Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Protocol Buffers compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: '1.81'
        components: llvm-tools-preview

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: coverage-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          coverage-${{ runner.os }}-cargo-

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Make coverage script executable
      run: chmod +x scripts/coverage.sh

    - name: Display coverage configuration
      run: |
        echo "üìä Coverage Configuration"
        echo "========================="
        echo "Exclusion file: .llvm-cov-exclude"
        echo ""
        echo "Excluded patterns:"
        cat .llvm-cov-exclude | grep -v '^#' | grep -v '^$' | sed 's/^/  - /'
        echo ""

    - name: Run comprehensive coverage analysis
      run: |
        echo "üß™ Running all tests with coverage..."
        ./scripts/coverage.sh --all-features --workspace --no-cfg-coverage

    - name: Generate coverage reports (multiple formats)
      run: |
        echo "üìà Generating coverage reports..."
        ./scripts/coverage.sh --all-features --workspace --lcov --output-path lcov.info --no-cfg-coverage
        ./scripts/coverage.sh --all-features --workspace --json --output-path coverage.json --no-cfg-coverage
        ./scripts/coverage.sh --all-features --workspace --html --output-dir target/coverage-html --no-cfg-coverage

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(./scripts/coverage.sh --all-features --workspace --summary-only --no-cfg-coverage 2>/dev/null | grep "TOTAL" | awk '{print $4}' | head -1)
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: lcov.info
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage reports (artifacts)
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ github.run_number }}
        path: |
          lcov.info
          coverage.json
          target/coverage-html/
        retention-days: 30

    - name: Coverage summary comment (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          const comment = `## üìä Code Coverage Report
          
          **Overall Coverage: ${coverage}**
          
          üìÑ **Coverage Reports Available:**
          - [Download HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [View on Codecov](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})
          
          üîç **Exclusions Applied:**
          - \`src/onnx.rs\` (auto-generated protobuf bindings)
          - \`src/bin/runner.rs\` (CLI entry point)
          - \`build.rs\` (build script)
          - \`src/formal.rs\` (formal specification module)
          
          This report was generated using our custom coverage script with configuration-based exclusions.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Check coverage threshold
      run: |
        COVERAGE=$(echo "${{ steps.coverage.outputs.percentage }}" | sed 's/%//')
        THRESHOLD=85
        
        if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
          echo "‚úÖ Coverage $COVERAGE% meets threshold of $THRESHOLD%"
        else
          echo "‚ùå Coverage $COVERAGE% below threshold of $THRESHOLD%"
          echo "Please add tests to improve coverage"
          exit 1
        fi
